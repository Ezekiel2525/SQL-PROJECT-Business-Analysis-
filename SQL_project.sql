CREATE DATABASE sqproject;
use sqproject;

-- Find the attached document as SQL Assessment.
-- Congratulations on your new role as the data Analyst of SQI Business Enterprise, 
-- the documents attached are the products we sell, our sales table, our sales team, and our store location.

-- Task, create a Table that merges the sales_table, sales_team, storelocation 
-- where the sales append and the products sold in these locations.

-- Return the Team with the maximum sales

-- Return the total cost of each sales

-- Return the total selling price per sales

-- Return the Revenue generated for each sales

-- On my sales table, i only have the index of the products, store location, and sales team,
-- kindly save this organization by making sure that the names of the products,
--  store and sales team are represented on the table.

-- Without a proper analysis, i will always have issue with my sales, 
-- you are hereby charged with the responsibility of analyzing the revenue of each sales,
-- each product, revenue generated by each sales team
-- The most sold product, total number of products sold, Sales team of each year.

-- I will like to know which month do we have the best sales,
--  which month do we have a down time, which year is supposed to be our best year, 
--  which year is not supposed to be in our calender

-- In addition, we have different type of categories of products, 
-- which category do we earn more? and which category do we earn least? 
-- what is the total product sales by category? what is the profit made in each category?

-- Do you think that we should keep selling all our products? 
-- We have different stores in different location, which one do you advise that we should shutdown? 
-- which one do you think gives us more profit? Kindly produce a table that shows total number of sales by store location, 
-- total cost of sales by location, Revenue by location, Profit made in each location.

-- Based on your results and findings, kindly draw an insight from the data, conclude and make recommendations.

-- Presentation is Monday, 8:30am, Kindly note, no assessment, no class.


ALTER TABLE products
DROP COLUMN MyUnknownColumn;

ALTER TABLE products
DROP COLUMN  `MyUnknownColumn_[21]`;

-- MERGING THE  TABLE
SELECT s.Order_Number, s.Sales_Date, s.Sales_Channel, s.Population, s.Median_Income, s.`Product Categories`, s.Order_qty, s.unit_price,
s.unit_cost, st.sal_team, st.Region, p.`Product Name`, p.`Product Category`, sl.name, sl.county, sl.state
FROM sales_table as s
LEFT JOIN sales_team as st on s.Salesteamindex = st.Index
LEFT JOIN store_location as sl on s.Storeindex = sl.id
left join products as p on s.Productindex = p.Index;


-- Return the Team with the maximum sales
SELECT sal_team, round(sum(Order_qty * unit_price), 2) as max_sales from merged_sales
group by sal_team
order by max_sales desc
limit 1;

-- Return the total cost of each sales
SELECT Order_Number, `Product Categories`, `Product Name`, sal_team, unit_cost, order_qty, round(unit_cost * order_qty, 1) AS total_cost
FROM merged_sales;

-- Return the total selling price per sales
SELECT Order_Number, `Product Name`, `Product Categories`, sal_team,  unit_price, order_qty, round(unit_price * order_qty, 1) AS total_sell
FROM merged_sales;


-- Return the Revenue generated for each sales
SELECT `Product Categories`, round(SUM(unit_price * Order_qty), 2) AS Revenue
FROM merged_sales
GROUP BY `Product Categories` 
order by Revenue desc;


-- Without a proper analysis, i will always have issue with my sales, 
-- you are hereby charged with the responsibility of analyzing the revenue of each sales,
-- each product, revenue generated by each sales team
-- The most sold product, total number of products sold, Sales team of each year.

-- REVENUE FOR EACH PRODUCT
SELECT `Product Name`, round(SUM(unit_price * Order_qty), 1)  AS Product_rev
FROM merged_sales
GROUP BY `Product Name`
order by Product_rev desc;


-- REVENURE FOR EACH SALES TEAM
SELECT sal_team, round(sum(unit_price * order_qty), 1) AS sales_rev
FROM merged_sales
GROUP BY sal_team
order by sales_rev desc;


-- TOTAL NUMBER OF PRODUCTS SOLD
SELECT `Product Name`,  count(`Product Name`) as total_product_sold
FROM merged_sales
Group by `Product Name`
order by total_product_sold desc;

-- MOST SOLD PRODUCT
SELECT `Product Name`, products_sold from total_products_sold
where products_sold in (SELECT max(products_sold) from total_products_sold);

-- Sales team of each year
SET SQL_SAFE_UPDATES = 0;
UPDATE merged_sales
SET Sales_Date = DATE_FORMAT(STR_TO_DATE(Sales_Date, '%d/%m/%Y'), '%Y-%m-%d');

SELECT sal_team, year(Sales_Date), unit_price, unit_cost from merged_sales;

-- I will like to know which month do we have the best sales,
--  which month do we have a down time, which year is supposed to be our best year, 
--  which year is not supposed to be in our calender

-- MONTH WITH THE BEST SALES
SELECT month(Sales_Date) , round(sum((unit_price - unit_cost) * order_qty), 1) as Profit
from merged_sales
group by month(Sales_Date)
order by Profit desc;

-- THE 5TH MONTH HAS THE HIGHEST PROFIT
-- THE 2ND MONTH HAS THE LOWEST SALES

-- PROFIT COLUMN
Alter Table merged_sales
add column Profit float;
UPDATE merged_sales
SET Profit = (unit_price - unit_cost) * order_qty;
select * from merged_sales;

-- SELECT month(Sales_Date), Profit from merged_sales
-- where Profit in (SELECT max(Profit) from merged_sales);


-- In addition, we have different type of categories of products, 
-- which category do we earn more? and which category do we earn least? 
-- what is the total product sales by category? what is the profit made in each category?


SELECT `Product Categories`, round(SUM(unit_price * Order_qty), 2) AS Revenue
FROM merged_sales
GROUP BY `Product Categories` 
order by Revenue desc;

-- WHICH CATEGORY EARN MORE?
SELECT `Product Categories`, Revenue from product_revenue
where Revenue in (SELECT max(Revenue) from product_revenue);
-- THE PRODUCT CATEGORY THAT EARNED MORE IS DECORATIVES

-- WHICH CATEGORY EARN LESS?
SELECT `Product Categories`, Revenue from product_revenue
where Revenue in (SELECT min(Revenue) from product_revenue);
-- THE PRODUCT CATEGORY THAT EARNED LESS IS SPORTS

-- -- what is the total product sales by category?
SELECT p.`Product Category`, round(sum(s.unit_price * s.order_qty), 1) as total_sales
from products as p left join sales_table as s on p.Index = s.ProductIndex
GROUP BY p.`Product Category`
Order by total_sales desc;


-- What is the Profit made in each category?
SELECT p.`Product Category`, round(SUM((s.unit_price - s.unit_cost) * s.order_qty), 1) AS total_profit
FROM products as p
INNER JOIN sales_table AS s ON p.Index = s.ProductIndex
GROUP BY p.`Product Category`
ORDER BY total_profit desc;


-- Do you think that we should keep selling all our products? 
-- We have different stores in different location, which one do you advise that we should shutdown? 
-- which one do you think gives us more profit? Kindly produce a table that shows total number of sales by store location, 
-- total cost of sales by location, Revenue by location, Profit made in each location.


-- STATE WITH THE LOWEST PROFIT
SELECT state, round(sum(Profit), 1) as least_profit FROM merged_sales
where Profit in (Select min(Profit) from merged_sales)
GROUP BY state;

-- I KINDLY ADVISE THAT STORES IN FLORIDA BE SHUTDOWN BECAUSE THE PROFIT THERE IS THE LOWEST

-- STATE WITH MOST PROFIT
SELECT state, round(sum(Profit), 1) as most_profit FROM merged_sales
where Profit in (Select max(Profit) from merged_sales)
GROUP BY state;


-- total number of sales by store location, 
SELECT state , COUNT(*) AS state_number_sales
from merged_sales
group by state;


-- total cost of sales by location
SELECT state , ROUND(SUM(unit_cost), 1) AS state_cost
from merged_sales
group by state;

-- Revenue by location
SELECT state , ROUND(SUM(unit_price * order_qty), 1) AS revenue_per_state
from merged_sales
group by state;

-- Profit made in each Location
SELECT state , ROUND(SUM((unit_price - unit_cost) * order_qty), 1) AS profit_per_state
from merged_sales
group by state;

-- SELECT state, COUNT(profit) AS total_profit
-- FROM (
--     SELECT state, Profit
--     FROM merged_sales
-- ) AS subquery
-- GROUP BY state
-- ORDER BY total_profit desc;















